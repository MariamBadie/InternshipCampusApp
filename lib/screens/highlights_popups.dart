import 'dart:io';

import 'package:campus_app/backend/Controller/highlightsController.dart'; // Ensure this path is correct
import 'package:campus_app/backend/Model/Post.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:campus_app/backend/Controller/postController.dart';
import 'package:image_picker/image_picker.dart';

class HighlightspopupsDialog extends StatefulWidget {
  final String highlightID;
  final String username;
  final String friendsOrProfile;

  HighlightspopupsDialog({required this.highlightID, required this.friendsOrProfile,required this.username});

  @override
  _HighlightspopupsDialogState createState() => _HighlightspopupsDialogState();
}

class _HighlightspopupsDialogState extends State<HighlightspopupsDialog> {
  List<Map<String, dynamic>> postData = [];
  int currentPage = 0;

  @override
  void initState() {
    super.initState();
    fetchHighlightPosts(widget.highlightID).then((fetchedPosts) {
      setState(() {
        postData = fetchedPosts;
        if (postData.isNotEmpty) {
          currentPage = 0; // Reset to the first page if there are posts
        }
        print(postData);
      });
    }).catchError((error) {
      print("Error fetching posts: $error");
    });
  }

  void _handlePopupMenuAction(String action, String? postId) async {
    if (postId == null) {
      print('Post ID is null');
      return;
    }

    print('Handling action: $action for post: $postId from highlight ${widget.highlightID}');
    switch (action) {
      case 'Delete Post':
        await removePostFromHighlightsById(widget.highlightID, "/Posts/$postId");
        setState(() {
          postData.removeWhere((post) => post['id'] == postId);
          if (currentPage >= postData.length) {
            currentPage = postData.length > 0 ? postData.length - 1 : 0;
          }
        });
        break;
      case 'Add Post':
        _showAddPostDialog();
        break;
    }
  }


void _showAddPostDialog() {
  String content = '';
  File? _imageFile; // Use File to store the selected image
  final ImagePicker _picker = ImagePicker();

  Future<void> _pickImage() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _imageFile = File(pickedFile.path);
      });
    }
  }

  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text('Add New Post'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            if (_imageFile != null)
              Image.file(
                _imageFile!,
                width: 100,
                height: 100,
                fit: BoxFit.cover,
              ),
            SizedBox(height: 10),
            TextField(
              decoration: InputDecoration(labelText: 'Content'),
              onChanged: (value) {
                content = value;
              },
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _pickImage,
              child: Text('Select Image'),
            ),
          ],
        ),
        actions: [
          TextButton(
            child: Text('Cancel'),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          TextButton(
            child: Text('Add Post'),
            onPressed: () async {
              if (content.isNotEmpty || _imageFile != null) {
                String? profilePictureUrl;

                if (_imageFile != null) {
                  // Upload image and get URL
                  profilePictureUrl = await _uploadImage(_imageFile!);
                }

                Post newPost = Post(
                  id: '', // ID will be generated by Firestore
                  username: widget.username,
                  type: 'Confession',
                  content: content,
                  profilePictureUrl: profilePictureUrl ?? '',
                  isAnonymous: false,
                  timestamp: DateTime.now(),
                  upvotes: 0,
                  downvotes: 0,
                  comments: [],
                  isConfession: true,
                  privacy: 'Public',
                );

                // Call addPost and get the ID
                String postId = await addPost(newPost);
                addPostToHighlights('${widget.highlightID}','/Posts/$postId');
                // Optionally, handle the post ID if needed
                print('New post added with ID: $postId');

                // Close the dialog
                Navigator.of(context).pop();
              } else {
                // Optionally, handle empty input
                print('Content or image is empty');
              }
            },
          ),
        ],
      );
    },
  );
}
Future<String?> _uploadImage(File imageFile) async {
  try {
    final storageRef = FirebaseStorage.instance.ref().child('posts/${DateTime.now().toString()}');
    final uploadTask = storageRef.putFile(imageFile);
    final snapshot = await uploadTask.whenComplete(() {});
    final downloadUrl = await snapshot.ref.getDownloadURL();
    return downloadUrl;
  } catch (e) {
    print('Error uploading image: $e');
    return null;
  }
}

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Highlight Posts'),
      content: Container(
        width: 300, // Adjust width as needed
        height: 300, // Adjust height as needed
        child: postData.isEmpty
            ? Center(child: CircularProgressIndicator())
            : Column(
                children: [
                  Expanded(
                    child: Center(
                      child: postData.isNotEmpty
                          ? Stack(
                              children: [
                                if (widget.friendsOrProfile == "profile")
                                  Positioned(
                                    top: 0,
                                    right: 0,
                                    child: PopupMenuButton<String>(
                                      onSelected: (value) {
                                        final postId = postData.isNotEmpty ? postData[currentPage]['id'] as String? : null;
                                        _handlePopupMenuAction(value, postId);
                                      },
                                      itemBuilder: (context) => [
                                        PopupMenuItem<String>(
                                          value: 'Delete Post',
                                          child: Text('Delete Post'),
                                        ),
                                        PopupMenuItem<String>(
                                          value: 'Add Post',
                                          child: Text('Add Post'),
                                        ),
                                      ],
                                    ),
                                  ),
                                Center(
                                  child: Text(
                                    postData.isNotEmpty
                                        ? postData[currentPage]['content'] ?? 'No content'
                                        : 'No content',
                                    textAlign: TextAlign.center,
                                    style: TextStyle(fontSize: 18),
                                  ),
                                ),
                              ],
                            )
                          : Text('No posts available'),
                    ),
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      IconButton(
                        icon: Icon(Icons.arrow_left),
                        onPressed: () {
                          setState(() {
                            if (currentPage > 0) {
                              currentPage--;
                            }
                          });
                        },
                      ),
                      IconButton(
                        icon: Icon(Icons.arrow_right),
                        onPressed: () {
                          setState(() {
                            if (currentPage < postData.length - 1) {
                              currentPage++;
                            }
                          });
                        },
                      ),
                    ],
                  ),
                ],
              ),
      ),
      actions: [
        TextButton(
          child: Text('Close'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
      ],
    );
  }
}

//---------------------------------------------------------------------------------------------------------------------------------
Future<String> addPost(Post post) async {
  try {
    // Add the post to Firestore and get a reference to the document
    DocumentReference docRef = await FirebaseFirestore.instance
        .collection('Posts')
        .add(post.toFirestore());

    // Return the ID of the newly added post
    return docRef.id;
  } catch (e) {
    print("Error adding post: $e");
    rethrow;
  }
}
//---------------------------------------------------------------------------------------------------------------------------------
